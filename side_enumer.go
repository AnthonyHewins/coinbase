// Code generated by "enumer -type Side -json -trimprefix Side -transform upper"; DO NOT EDIT.

package coinbase

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _SideName = "UNSPECIFIEDBUYSELL"

var _SideIndex = [...]uint8{0, 11, 14, 18}

const _SideLowerName = "unspecifiedbuysell"

func (i Side) String() string {
	if i >= Side(len(_SideIndex)-1) {
		return fmt.Sprintf("Side(%d)", i)
	}
	return _SideName[_SideIndex[i]:_SideIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _SideNoOp() {
	var x [1]struct{}
	_ = x[SideUnspecified-(0)]
	_ = x[SideBuy-(1)]
	_ = x[SideSell-(2)]
}

var _SideValues = []Side{SideUnspecified, SideBuy, SideSell}

var _SideNameToValueMap = map[string]Side{
	_SideName[0:11]:       SideUnspecified,
	_SideLowerName[0:11]:  SideUnspecified,
	_SideName[11:14]:      SideBuy,
	_SideLowerName[11:14]: SideBuy,
	_SideName[14:18]:      SideSell,
	_SideLowerName[14:18]: SideSell,
}

var _SideNames = []string{
	_SideName[0:11],
	_SideName[11:14],
	_SideName[14:18],
}

// SideString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SideString(s string) (Side, error) {
	if val, ok := _SideNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _SideNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Side values", s)
}

// SideValues returns all values of the enum
func SideValues() []Side {
	return _SideValues
}

// SideStrings returns a slice of all String values of the enum
func SideStrings() []string {
	strs := make([]string, len(_SideNames))
	copy(strs, _SideNames)
	return strs
}

// IsASide returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Side) IsASide() bool {
	for _, v := range _SideValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Side
func (i Side) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Side
func (i *Side) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Side should be a string, got %s", data)
	}

	var err error
	*i, err = SideString(s)
	return err
}
