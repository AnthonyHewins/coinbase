// Code generated by "enumer -type AcctType -transform snake_upper -json"; DO NOT EDIT.

package coinbase

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _AcctTypeName = "ACCOUNT_TYPE_UNSPECIFIEDACCOUNT_TYPE_CRYPTOACCOUNT_TYPE_FIATACCOUNT_TYPE_VAULTACCOUNT_TYPE_PERP_FUTURES"

var _AcctTypeIndex = [...]uint8{0, 24, 43, 60, 78, 103}

const _AcctTypeLowerName = "account_type_unspecifiedaccount_type_cryptoaccount_type_fiataccount_type_vaultaccount_type_perp_futures"

func (i AcctType) String() string {
	if i >= AcctType(len(_AcctTypeIndex)-1) {
		return fmt.Sprintf("AcctType(%d)", i)
	}
	return _AcctTypeName[_AcctTypeIndex[i]:_AcctTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _AcctTypeNoOp() {
	var x [1]struct{}
	_ = x[AccountTypeUnspecified-(0)]
	_ = x[AccountTypeCrypto-(1)]
	_ = x[AccountTypeFiat-(2)]
	_ = x[AccountTypeVault-(3)]
	_ = x[AccountTypePerpFutures-(4)]
}

var _AcctTypeValues = []AcctType{AccountTypeUnspecified, AccountTypeCrypto, AccountTypeFiat, AccountTypeVault, AccountTypePerpFutures}

var _AcctTypeNameToValueMap = map[string]AcctType{
	_AcctTypeName[0:24]:        AccountTypeUnspecified,
	_AcctTypeLowerName[0:24]:   AccountTypeUnspecified,
	_AcctTypeName[24:43]:       AccountTypeCrypto,
	_AcctTypeLowerName[24:43]:  AccountTypeCrypto,
	_AcctTypeName[43:60]:       AccountTypeFiat,
	_AcctTypeLowerName[43:60]:  AccountTypeFiat,
	_AcctTypeName[60:78]:       AccountTypeVault,
	_AcctTypeLowerName[60:78]:  AccountTypeVault,
	_AcctTypeName[78:103]:      AccountTypePerpFutures,
	_AcctTypeLowerName[78:103]: AccountTypePerpFutures,
}

var _AcctTypeNames = []string{
	_AcctTypeName[0:24],
	_AcctTypeName[24:43],
	_AcctTypeName[43:60],
	_AcctTypeName[60:78],
	_AcctTypeName[78:103],
}

// AcctTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AcctTypeString(s string) (AcctType, error) {
	if val, ok := _AcctTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _AcctTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to AcctType values", s)
}

// AcctTypeValues returns all values of the enum
func AcctTypeValues() []AcctType {
	return _AcctTypeValues
}

// AcctTypeStrings returns a slice of all String values of the enum
func AcctTypeStrings() []string {
	strs := make([]string, len(_AcctTypeNames))
	copy(strs, _AcctTypeNames)
	return strs
}

// IsAAcctType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i AcctType) IsAAcctType() bool {
	for _, v := range _AcctTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for AcctType
func (i AcctType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for AcctType
func (i *AcctType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("AcctType should be a string, got %s", data)
	}

	var err error
	*i, err = AcctTypeString(s)
	return err
}
