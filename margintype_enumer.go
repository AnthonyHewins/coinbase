// Code generated by "enumer -type MarginType -json -transform snake_upper -trimprefix MarginType"; DO NOT EDIT.

package coinbase

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _MarginTypeName = "UNKNOWN_MARGIN_TYPECROSSISOLATED"

var _MarginTypeIndex = [...]uint8{0, 19, 24, 32}

const _MarginTypeLowerName = "unknown_margin_typecrossisolated"

func (i MarginType) String() string {
	if i >= MarginType(len(_MarginTypeIndex)-1) {
		return fmt.Sprintf("MarginType(%d)", i)
	}
	return _MarginTypeName[_MarginTypeIndex[i]:_MarginTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _MarginTypeNoOp() {
	var x [1]struct{}
	_ = x[UnknownMarginType-(0)]
	_ = x[MarginTypeCross-(1)]
	_ = x[MarginTypeIsolated-(2)]
}

var _MarginTypeValues = []MarginType{UnknownMarginType, MarginTypeCross, MarginTypeIsolated}

var _MarginTypeNameToValueMap = map[string]MarginType{
	_MarginTypeName[0:19]:       UnknownMarginType,
	_MarginTypeLowerName[0:19]:  UnknownMarginType,
	_MarginTypeName[19:24]:      MarginTypeCross,
	_MarginTypeLowerName[19:24]: MarginTypeCross,
	_MarginTypeName[24:32]:      MarginTypeIsolated,
	_MarginTypeLowerName[24:32]: MarginTypeIsolated,
}

var _MarginTypeNames = []string{
	_MarginTypeName[0:19],
	_MarginTypeName[19:24],
	_MarginTypeName[24:32],
}

// MarginTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MarginTypeString(s string) (MarginType, error) {
	if val, ok := _MarginTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _MarginTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to MarginType values", s)
}

// MarginTypeValues returns all values of the enum
func MarginTypeValues() []MarginType {
	return _MarginTypeValues
}

// MarginTypeStrings returns a slice of all String values of the enum
func MarginTypeStrings() []string {
	strs := make([]string, len(_MarginTypeNames))
	copy(strs, _MarginTypeNames)
	return strs
}

// IsAMarginType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i MarginType) IsAMarginType() bool {
	for _, v := range _MarginTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for MarginType
func (i MarginType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for MarginType
func (i *MarginType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("MarginType should be a string, got %s", data)
	}

	var err error
	*i, err = MarginTypeString(s)
	return err
}
