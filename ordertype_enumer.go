// Code generated by "enumer -type OrderType"; DO NOT EDIT.

package coinbase

import (
	"fmt"
	"strings"
)

const _OrderTypeName = "OrderTypeUnspecifiedMarketLimitIOCLimitFOKLimitGTCLimitGTDStopLimitGTCStopLimitGTDTriggerBracketGTCTriggerBracketGTD"

var _OrderTypeIndex = [...]uint8{0, 20, 26, 34, 42, 50, 58, 70, 82, 99, 116}

const _OrderTypeLowerName = "ordertypeunspecifiedmarketlimitioclimitfoklimitgtclimitgtdstoplimitgtcstoplimitgtdtriggerbracketgtctriggerbracketgtd"

func (i OrderType) String() string {
	if i >= OrderType(len(_OrderTypeIndex)-1) {
		return fmt.Sprintf("OrderType(%d)", i)
	}
	return _OrderTypeName[_OrderTypeIndex[i]:_OrderTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _OrderTypeNoOp() {
	var x [1]struct{}
	_ = x[OrderTypeUnspecified-(0)]
	_ = x[Market-(1)]
	_ = x[LimitIOC-(2)]
	_ = x[LimitFOK-(3)]
	_ = x[LimitGTC-(4)]
	_ = x[LimitGTD-(5)]
	_ = x[StopLimitGTC-(6)]
	_ = x[StopLimitGTD-(7)]
	_ = x[TriggerBracketGTC-(8)]
	_ = x[TriggerBracketGTD-(9)]
}

var _OrderTypeValues = []OrderType{OrderTypeUnspecified, Market, LimitIOC, LimitFOK, LimitGTC, LimitGTD, StopLimitGTC, StopLimitGTD, TriggerBracketGTC, TriggerBracketGTD}

var _OrderTypeNameToValueMap = map[string]OrderType{
	_OrderTypeName[0:20]:        OrderTypeUnspecified,
	_OrderTypeLowerName[0:20]:   OrderTypeUnspecified,
	_OrderTypeName[20:26]:       Market,
	_OrderTypeLowerName[20:26]:  Market,
	_OrderTypeName[26:34]:       LimitIOC,
	_OrderTypeLowerName[26:34]:  LimitIOC,
	_OrderTypeName[34:42]:       LimitFOK,
	_OrderTypeLowerName[34:42]:  LimitFOK,
	_OrderTypeName[42:50]:       LimitGTC,
	_OrderTypeLowerName[42:50]:  LimitGTC,
	_OrderTypeName[50:58]:       LimitGTD,
	_OrderTypeLowerName[50:58]:  LimitGTD,
	_OrderTypeName[58:70]:       StopLimitGTC,
	_OrderTypeLowerName[58:70]:  StopLimitGTC,
	_OrderTypeName[70:82]:       StopLimitGTD,
	_OrderTypeLowerName[70:82]:  StopLimitGTD,
	_OrderTypeName[82:99]:       TriggerBracketGTC,
	_OrderTypeLowerName[82:99]:  TriggerBracketGTC,
	_OrderTypeName[99:116]:      TriggerBracketGTD,
	_OrderTypeLowerName[99:116]: TriggerBracketGTD,
}

var _OrderTypeNames = []string{
	_OrderTypeName[0:20],
	_OrderTypeName[20:26],
	_OrderTypeName[26:34],
	_OrderTypeName[34:42],
	_OrderTypeName[42:50],
	_OrderTypeName[50:58],
	_OrderTypeName[58:70],
	_OrderTypeName[70:82],
	_OrderTypeName[82:99],
	_OrderTypeName[99:116],
}

// OrderTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OrderTypeString(s string) (OrderType, error) {
	if val, ok := _OrderTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _OrderTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to OrderType values", s)
}

// OrderTypeValues returns all values of the enum
func OrderTypeValues() []OrderType {
	return _OrderTypeValues
}

// OrderTypeStrings returns a slice of all String values of the enum
func OrderTypeStrings() []string {
	strs := make([]string, len(_OrderTypeNames))
	copy(strs, _OrderTypeNames)
	return strs
}

// IsAOrderType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i OrderType) IsAOrderType() bool {
	for _, v := range _OrderTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
