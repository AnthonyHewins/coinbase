// Code generated by "enumer -type ProductType -transform snake_upper -json -trimprefix ProductType"; DO NOT EDIT.

package coinbase

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _ProductTypeName = "UNKNOWN_PRODUCT_TYPESPOTFUTURE"

var _ProductTypeIndex = [...]uint8{0, 20, 24, 30}

const _ProductTypeLowerName = "unknown_product_typespotfuture"

func (i ProductType) String() string {
	if i >= ProductType(len(_ProductTypeIndex)-1) {
		return fmt.Sprintf("ProductType(%d)", i)
	}
	return _ProductTypeName[_ProductTypeIndex[i]:_ProductTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ProductTypeNoOp() {
	var x [1]struct{}
	_ = x[UnknownProductType-(0)]
	_ = x[ProductTypeSpot-(1)]
	_ = x[ProductTypeFuture-(2)]
}

var _ProductTypeValues = []ProductType{UnknownProductType, ProductTypeSpot, ProductTypeFuture}

var _ProductTypeNameToValueMap = map[string]ProductType{
	_ProductTypeName[0:20]:       UnknownProductType,
	_ProductTypeLowerName[0:20]:  UnknownProductType,
	_ProductTypeName[20:24]:      ProductTypeSpot,
	_ProductTypeLowerName[20:24]: ProductTypeSpot,
	_ProductTypeName[24:30]:      ProductTypeFuture,
	_ProductTypeLowerName[24:30]: ProductTypeFuture,
}

var _ProductTypeNames = []string{
	_ProductTypeName[0:20],
	_ProductTypeName[20:24],
	_ProductTypeName[24:30],
}

// ProductTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ProductTypeString(s string) (ProductType, error) {
	if val, ok := _ProductTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ProductTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ProductType values", s)
}

// ProductTypeValues returns all values of the enum
func ProductTypeValues() []ProductType {
	return _ProductTypeValues
}

// ProductTypeStrings returns a slice of all String values of the enum
func ProductTypeStrings() []string {
	strs := make([]string, len(_ProductTypeNames))
	copy(strs, _ProductTypeNames)
	return strs
}

// IsAProductType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ProductType) IsAProductType() bool {
	for _, v := range _ProductTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ProductType
func (i ProductType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ProductType
func (i *ProductType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ProductType should be a string, got %s", data)
	}

	var err error
	*i, err = ProductTypeString(s)
	return err
}
