// Code generated by "enumer -type Status -json -transform upper -trimprefix Status"; DO NOT EDIT.

package coinbase

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _StatusName = "UNKNOWNPENDINGOPENFILLEDCANCELLEDEXPIREDFAILEDQUEUEDCANCELQUEUED"

var _StatusIndex = [...]uint8{0, 7, 14, 18, 24, 33, 40, 46, 52, 64}

const _StatusLowerName = "unknownpendingopenfilledcancelledexpiredfailedqueuedcancelqueued"

func (i Status) String() string {
	if i >= Status(len(_StatusIndex)-1) {
		return fmt.Sprintf("Status(%d)", i)
	}
	return _StatusName[_StatusIndex[i]:_StatusIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _StatusNoOp() {
	var x [1]struct{}
	_ = x[StatusUnknown-(0)]
	_ = x[StatusPending-(1)]
	_ = x[StatusOpen-(2)]
	_ = x[StatusFilled-(3)]
	_ = x[StatusCancelled-(4)]
	_ = x[StatusExpired-(5)]
	_ = x[StatusFailed-(6)]
	_ = x[StatusQueued-(7)]
	_ = x[StatusCancelQueued-(8)]
}

var _StatusValues = []Status{StatusUnknown, StatusPending, StatusOpen, StatusFilled, StatusCancelled, StatusExpired, StatusFailed, StatusQueued, StatusCancelQueued}

var _StatusNameToValueMap = map[string]Status{
	_StatusName[0:7]:        StatusUnknown,
	_StatusLowerName[0:7]:   StatusUnknown,
	_StatusName[7:14]:       StatusPending,
	_StatusLowerName[7:14]:  StatusPending,
	_StatusName[14:18]:      StatusOpen,
	_StatusLowerName[14:18]: StatusOpen,
	_StatusName[18:24]:      StatusFilled,
	_StatusLowerName[18:24]: StatusFilled,
	_StatusName[24:33]:      StatusCancelled,
	_StatusLowerName[24:33]: StatusCancelled,
	_StatusName[33:40]:      StatusExpired,
	_StatusLowerName[33:40]: StatusExpired,
	_StatusName[40:46]:      StatusFailed,
	_StatusLowerName[40:46]: StatusFailed,
	_StatusName[46:52]:      StatusQueued,
	_StatusLowerName[46:52]: StatusQueued,
	_StatusName[52:64]:      StatusCancelQueued,
	_StatusLowerName[52:64]: StatusCancelQueued,
}

var _StatusNames = []string{
	_StatusName[0:7],
	_StatusName[7:14],
	_StatusName[14:18],
	_StatusName[18:24],
	_StatusName[24:33],
	_StatusName[33:40],
	_StatusName[40:46],
	_StatusName[46:52],
	_StatusName[52:64],
}

// StatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func StatusString(s string) (Status, error) {
	if val, ok := _StatusNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _StatusNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Status values", s)
}

// StatusValues returns all values of the enum
func StatusValues() []Status {
	return _StatusValues
}

// StatusStrings returns a slice of all String values of the enum
func StatusStrings() []string {
	strs := make([]string, len(_StatusNames))
	copy(strs, _StatusNames)
	return strs
}

// IsAStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Status) IsAStatus() bool {
	for _, v := range _StatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Status
func (i Status) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Status
func (i *Status) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Status should be a string, got %s", data)
	}

	var err error
	*i, err = StatusString(s)
	return err
}
